{"version":3,"file":"FileContentGenerator.js","sourceRoot":"","sources":["../../../src/cli/core/FileContentGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport {TAllClassnames} from '../types/classes';\nimport {TailwindConfigParser} from './TailwindConfigParser';\n\nexport class FileContentGenerator {\n  private _configParser: TailwindConfigParser;\n  private readonly _generatedClassNames: TAllClassnames;\n\n  /**\n   * Initializes a new instance of the `FileContentGenerator` class.\n   * @param generatedClassnames The generated classnames to put in the template.\n   */\n  constructor(generatedClassnames: TAllClassnames, configParser: TailwindConfigParser) {\n    this._configParser = configParser;\n    this._generatedClassNames = generatedClassnames;\n  }\n\n  public generateFileContent = (): string => {\n    return (\n      this.fileHeaderTemplate() +\n      '\\n\\n' +\n      this.importStatementsTemplate() +\n      '\\n\\n' +\n      this.regularClassnamesTypesTemplate() +\n      '\\n\\n' +\n      this.variantsTypeTemplate() +\n      '\\n\\n' +\n      this.utilityFunctionsTemplate() +\n      '\\n\\n' +\n      this.mainExportStatementsTemplate()\n    );\n  };\n\n  private fileHeaderTemplate = (): string => {\n    return (\n      '/* eslint-disable */\\n' +\n      '/* tslint:disable */\\n' +\n      '\\n' +\n      '//////////////////////////////////////////////////////////////////////////////\\n' +\n      '/// Autogenerated by tailwindcss-classnames CLI. https://git.io/JtsPU\\n' +\n      '/// DO NOT EDIT THIS FILE DIRECTLY!\\n' +\n      '//////////////////////////////////////////////////////////////////////////////\\n'\n    );\n  };\n\n  private importStatementsTemplate = (): string => {\n    return \"import classnamesLib from 'clsx';\" + '\\n' + `T_CUSTOM_CLASSES_IMPORT_STATEMENT`;\n  };\n\n  private variantsTypeTemplate = (): string => {\n    const variants = this._configParser.getVariants();\n\n    return this.generateTypesTemplate(\n      'PseudoClassVariants',\n      variants.map(variant => variant + this._configParser.getSeparator()), // 'hover:', 'focus:'\n      undefined,\n      true,\n    );\n  };\n\n  private regularClassnamesTypesTemplate = (): string => {\n    return Object.keys(this._generatedClassNames)\n      .map(classGroupKey => {\n        return this.generateTypesGroupTemplate(\n          this._generatedClassNames[classGroupKey as keyof TAllClassnames] as TAllClassnames,\n          classGroupKey,\n        );\n      })\n      .join('\\n');\n  };\n\n  private utilityFunctionsTemplate = (): string => {\n    let template =\n      '//////////// Utility Function generic type\\n\\n' +\n      'type TUtilityFunction<T extends string> = (\\n' +\n      '  ...args: Array<\\n' +\n      '    | T\\n' +\n      '    | `!${T}`\\n' +\n      '    | `${TPseudoClassVariants}${T}`\\n' +\n      '    | `${TPseudoClassVariants}!${T}`\\n' +\n      '    | null\\n' +\n      '    | undefined\\n' +\n      '    | {[key in T | `${TPseudoClassVariants}${T}` | `!${T}` | `${TPseudoClassVariants}!${T}` | TTailwindString]?: boolean}\\n' +\n      '    | TTailwindString\\n' +\n      '  >\\n' +\n      ') => TTailwindString;';\n\n    for (const [categoryKey, value] of Object.entries(this._generatedClassNames)) {\n      const subCategoriesTemplate = Object.keys(value) // sub-ctegories keys\n        .map(SubCategory => {\n          const fnName = _.camelCase(SubCategory);\n          const fnType = `TUtilityFunction<T${_.upperFirst(SubCategory)}>`;\n\n          return `export const ${fnName}: ${fnType} = classnamesLib as any`;\n        })\n        .join('\\n');\n\n      template =\n        template +\n        '\\n' +\n        `\\n//////////// ${categoryKey} Utility functions\\n` +\n        '\\n' +\n        subCategoriesTemplate;\n    }\n\n    return template;\n  };\n\n  private mainExportStatementsTemplate = (): string => {\n    const utilityFunctionsObjectTemplate = Object.keys(this._generatedClassNames)\n      .map(cn => {\n        const subCategoryObj = this._generatedClassNames[cn as keyof TAllClassnames];\n        if (subCategoryObj !== undefined) {\n          return Object.keys(subCategoryObj)\n            .map(sc => '  ' + sc)\n            .join(',\\n');\n        }\n      })\n      .join(',\\n');\n\n    return (\n      `export const TW = {\\n${utilityFunctionsObjectTemplate}\\n}\\n` +\n      '\\n' +\n      'export type TTailwindString = \"TAILWIND_STRING\"\\n' +\n      '\\n' +\n      'export type TArg =\\n' +\n      '| null\\n' +\n      '| undefined\\n' +\n      '| TTailwindString\\nIMPORTED_T_CUSTOM_CLASSES_ARG' +\n      '\\n' +\n      'export type TTailwind = (...args: TArg[]) => TTailwindString\\n' +\n      '\\n' +\n      'export const classnames: TTailwind = classnamesLib as any\\n' +\n      '\\n' +\n      'export default classnames'\n    );\n  };\n\n  /**\n   * Generates types group template for a utility classes group object.\n   *\n   *\n   * ### example:\n   *\n   * A utility group object as:\n   *\n   * ```js\n   * const FlexBox = {\n   *   alignSelf: ['self-auto', 'self-start', 'self-center'],\n   *   flexWrap: ['flex-nowrap', 'flex-wrap'],\n   * }\n   *```\n   *\n   * will produce a template which looks like this:\n   *\n   * ```ts\n   * export type TFlexWrap =\n   * | 'flex-nowrap'\n   * | 'flex-wrap';\n   *\n   * export type TAlignSelf =\n   * | 'self-auto'\n   * | 'self-start'\n   * | 'self-center';\n   *\n   * export type TFlexBox = TFlexWrap | TAlignSelf;\n   * ```\n   */\n  private generateTypesGroupTemplate = (group: TAllClassnames, groupName: string): string => {\n    const members = Object.keys(group);\n\n    const generateMembersStatements = (): string[] => {\n      return members.map(member => {\n        return this.generateTypesTemplate(\n          member,\n          group[member as keyof TAllClassnames] as string[],\n          this._configParser.getPrefix(),\n        );\n      });\n    };\n\n    const generateGroupStatement = (): string => {\n      const getMembersStatementsReferences = (): string =>\n        members.map(member => 'T' + _.upperFirst(member)).join('\\n  | ');\n\n      return (\n        `export type T${_.upperFirst(groupName)} =` +\n        '\\n  | ' +\n        getMembersStatementsReferences() +\n        '\\n'\n      );\n    };\n\n    return generateMembersStatements().join('\\n\\n') + '\\n\\n' + generateGroupStatement();\n  };\n\n  /**\n   * Generates TS types template from a list of strings.\n   *\n   * #### Example:\n   *\n   * Given typeName: 'baz' and items:\n   * ```js\n   * ['foo', 'bar']\n   * ```\n   *\n   * generates:\n   *\n   * ```\n   * export type TBaz\n   *   | foo\n   *   | bar;\n   * ```\n   * or with quoutes:\n   * ```\n   * export type TBaz\n   *   | 'foo'\n   *   | 'bar';\n   * ```\n   * @param typeName The name of the type (without T prefix).\n   * @param items The list of the strings of items to add to the type name.\n   * @param prefix The prefix to add to the beginning of each item of the string array.\n   * @param surroundWithQuotes Whether to quote the types or not (make it a string or an actual type)\n   */\n  private generateTypesTemplate = (\n    typeName: string,\n    items: string[],\n    prefix?: string,\n    surroundWithQuotes: boolean = true,\n  ): string => {\n    return (\n      `export type T${_.upperFirst(typeName)} =` +\n      '\\n  | ' +\n      items\n        .flatMap(item => {\n          const classnamesThatShouldKeepTheDefaultSuffix = ['cursor'];\n\n          return classnamesThatShouldKeepTheDefaultSuffix.map(x => {\n            const shouldKeepDefaultSuffix: boolean = item.includes(x);\n            const name = shouldKeepDefaultSuffix ? item : item.replace('-DEFAULT', '');\n\n            const nameWithOrWithoutPrefix = `${prefix ? prefix : ''}${name}`;\n\n            return surroundWithQuotes ? `'${nameWithOrWithoutPrefix}'` : nameWithOrWithoutPrefix;\n          });\n        })\n        .join('\\n  | ')\n    );\n  };\n}\n"]}